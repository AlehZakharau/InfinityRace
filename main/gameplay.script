local data = require("main/data")

go.property("car_speed", 1000)
go.property("max_car_speed", 1000)
go.property("track_stage_duration", 100)
go.property("boost_speed", 2)
go.property("boost_duration", 0.5)
go.property("boost_delay", 3)

local file_track_1_name = "/data/track_1.txt"
local file_track_2_name = "/data/track_2.txt"
local line_match_pattern = "([^\n]+)"
local match_pattern = "([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)"

local car_1 = "/go1"
local car_2 = "/go2"

local track_1, track_2 = {}, {}
local index_1, index_2 = 1, 1
local time = 0

local car_index_1, car_index_2 = 1, 2
local car_1_moved, car_2_moved = true, true
local car_1_active, car_2_active = false, false
local car_1_speed, car_2_speed, car_speed

local boost_delay
local boost_duration
local boost_speed
local boost_1, boost_2 = false, false

local current_track_car_1, current_track_car_2
local current_track_index_1, current_track_index_2

local function activate_track_speed_timer(self)
	timer.delay(self.track_stage_duration, true, function()
		if self.car_speed < self.max_car_speed then
			self.car_speed = self.car_speed + 50
			car_speed = self.car_speed
			car_1_speed = self.car_speed
			car_2_speed = self.car_speed
		end
	end)
end

local function spawn_bonus(position)
	local bonus = math.random(1, 5)
	local bonus_id = factory.create("/factory_bonus#foctory_bonus", position, nil, {bonus_index = bonus})
	return bonus, bonus_id
end

local function initialize_track(track, path)
	local track_data = sys.load_resource(path)
	for line in track_data:gmatch(line_match_pattern) do
		local a, x, y, switcher_status, connector_index, bonus_status = line:match(match_pattern)
		local id = tonumber(a)
		track[id] = {position = vmath.vector3(x, y, 0), switcher = tonumber(switcher_status),
					 connector = tonumber(connector_index), bonus = tonumber(bonus_status)}
		if tonumber(bonus_status) == 1 then
			track[id].bonus, track[id].bonus_id = spawn_bonus(track[id].position)
		end
	end
end

local function initialize_tracks()
	initialize_track(track_1, file_track_1_name)
	current_track_car_1 = track_1
	current_track_index_1 = 1
	initialize_track(track_2, file_track_2_name)
	current_track_car_2 = track_2
	current_track_index_2 = 2
end

function init(self)
	sound.play("/sound#car_track")
	sound.play("/sound#high_speed")
	math.randomseed(os.time())
	car_1_speed, car_2_speed, car_speed = self.car_speed, self.car_speed, self.car_speed
	boost_speed, boost_delay, boost_duration = self.boost_speed, self.boost_delay, self.boost_duration

	initialize_tracks()
	activate_track_speed_timer(self)

	msg.post(".", "acquire_input_focus")
	car_1_active, car_2_active = true, true
end

local bonus_respawn_index_1, bonus_respawn_index_2

local function check_car_position()
	if current_track_index_1 == current_track_index_2 and math.abs(index_1 - index_2) < 2 then
		return true
	else
		return false
	end
end

local function disable_car_2()
	data.score_2 = data.score_2 - 25
	msg.post("/ui#ui", "update_score")
	car_2_active = false
	car_2_moved = true
	timer.delay(3, false, function() car_2_active = true end)
end

local function disable_car_1()
	data.score_1 = data.score_1 - 25
	msg.post("/ui#ui", "update_score")
	car_1_active = false
	car_1_moved = true
	timer.delay(3, false, function() car_1_active = true end)
end

local function change_car_speed(speed, sign)
	return speed + sign * speed * 0.25
end

local function speed_bonus(car_index, sign)
	if car_index == 1 then
		data.score_1 = data.score_1 + 15
		msg.post("/ui#ui", "update_score")
		car_1_speed = change_car_speed(car_1_speed, sign)
		timer.delay(3, false, function() car_1_speed = car_speed end)
	else
		data.score_2 = data.score_2 + 15
		msg.post("/ui#ui", "update_score")
		car_2_speed = change_car_speed(car_2_speed, sign)
		timer.delay(3, false, function() car_2_speed = car_speed end)
	end
end

local function lap_bonus(car_index)
	if car_index == 1 then
		data.score_1 = data.score_1 + 25
		msg.post("/ui#ui", "update_score")
		data.lap_index_1 = data.lap_index_1 + 1
		msg.post("/ui#ui", "update_lap")
	else
		data.score_2 = data.score_2 + 25
		msg.post("/ui#ui", "update_score")
		data.lap_index_2 = data.lap_index_2 + 1
		msg.post("/ui#ui", "update_lap")
	end
end

local function get_stuck_bonus(car_index)
	sound.play("/sound#get_stuck")
	if car_index == 1 then
		disable_car_1()
	else
		disable_car_2()
	end
end

local function launch_rocket(car_index)
	local position = vmath.vector3(0, 200, 0)
	sound.play("/sound#rocket")
	if car_index == 1 then
		data.score_1 = data.score_1 + 50
		msg.post("/ui#ui", "update_score")
		factory.create("/factory_rocket#factory_rocket", position, nil, {target = 2})
	else
		data.score_2 = data.score_2 + 50
		msg.post("/ui#ui", "update_score")
		factory.create("/factory_rocket#factory_rocket", position, nil, {target = 1})
	end
end


local function activate_boost(boost_number, car_index)
	if boost_number == 1 then
		sound.play("/sound#speed_boost")
		print("Bonus: Increase speed")
		speed_bonus(car_index, 1)
	elseif boost_number == 2 then
		sound.play("/sound#slowdown")
		print("Bonus: Decrease speed")
		speed_bonus(car_index, -1)
	elseif boost_number == 3 then
		print("Bonus: Add lap")
		sound.play("/sound#lap_bonus")
		lap_bonus(car_index)
	elseif boost_number == 4 then
		print("Bonus: get stuck")
		get_stuck_bonus(car_index)
	elseif boost_number == 5 then
		print("Bonus: launch rocket")
		launch_rocket(car_index)
	end
end


local function car_1_callback()
	if car_1_active == true then
		car_1_moved = true
		if check_car_position() == true and index_1 < index_2 and car_1_active == true then
			disable_car_2()
		end

		if current_track_car_1[index_1].bonus > 0 then
			activate_boost(current_track_car_1[index_1].bonus, car_index_1)
			go.delete(current_track_car_1[index_1].bonus_id)
			bonus_respawn_index_1 = index_1
			current_track_car_1[index_1].bonus = 0
			timer.delay(1, false, function()
				local bonus = math.random(1, 5)
				local id = factory.create("/factory_bonus#foctory_bonus", current_track_car_1[bonus_respawn_index_1].position, nil, {bonus_index = bonus})
				current_track_car_1[bonus_respawn_index_1].bonus = bonus
				current_track_car_1[bonus_respawn_index_1].bonus_id = id
			end)
		end
	end
end


local function car_2_callback()
	if car_2_active == true then
		car_2_moved = true
		if check_car_position() == true and index_1 > index_2 and car_2_active == true then
			disable_car_1()
		end
		if current_track_car_2[index_2].bonus > 0 then
			activate_boost(current_track_car_2[index_2].bonus, car_index_2)
			go.delete(current_track_car_2[index_2].bonus_id)
			bonus_respawn_index_2 = index_2
			current_track_car_2[index_2].bonus = 0
			timer.delay(1, false, function()
				local bonus = math.random(1, 5)
				local id = factory.create("/factory_bonus#foctory_bonus", current_track_car_2[bonus_respawn_index_2].position, nil, {bonus_index = bonus})
				current_track_car_2[bonus_respawn_index_2].bonus = bonus
				current_track_car_2[bonus_respawn_index_2].bonus_id = id
			end)
		end
	end
end

local function increment_index(index, track_length)
	local next_index = index + 1
	if next_index > track_length then next_index = 1 end
	return next_index
end
local function increment_index_and_lap(index, lap_index, track_length)
	local next_index = index + 1
	if next_index > track_length then
		next_index = 1
		lap_index = lap_index + 1
		msg.post("/ui#ui", "update_lap")
	end
	return next_index, lap_index
end

local function rotate_car(car, track, index)
	local current_position = go.get_position(car)
	local next_index = increment_index(index, #track)
	local target_position = track[next_index].position
	local angle = math.atan2(current_position.x - target_position.x, target_position.y - current_position.y)
	go.set_rotation(vmath.quat_rotation_z(angle), car)
end

local function move_car(track, index, lap_index, car, speed, callback)
	local current_position = track[index].position
	local next_index, current_lap = increment_index_and_lap(index, lap_index, #track)
	local target_position = track[next_index].position
	local distance = vmath.length(target_position - current_position)
	local duration = distance / speed
	go.animate(car, "position", go.PLAYBACK_ONCE_FORWARD, target_position, go.EASING_LINEAR, duration, 0, callback)
	return next_index, current_lap
end


local function switch_track(track, index, track_index)
	if track[index].switcher == 1 then
		sound.play("/sound#switch_track")
		if track_index == 1 then
			index = track[index].connector
			track = track_2
			track_index = 2
			return track, index, track_index
		else
			index = track[index].connector
			track = track_1
			track_index = 1
			return track, index, track_index
		end
	end
	return track, index, track_index
end

local score_timer = 0

function update(self, dt)
	time = time + dt
	score_timer = score_timer + dt
	if car_1_moved == true and car_1_active == true then
		car_1_moved = false
		index_1, data.lap_index_1 = move_car(current_track_car_1, index_1, data.lap_index_1, car_1, car_1_speed, car_1_callback)
	end
	if car_2_moved == true and car_2_active == true then
		car_2_moved = false
		index_2, data.lap_index_2 = move_car(current_track_car_2, index_2, data.lap_index_2, car_2, car_2_speed, car_2_callback)
	end
	if car_1_active == true then
		rotate_car(car_1, current_track_car_1, index_1)
	end
	if car_2_active == true then
		rotate_car(car_2, current_track_car_2, index_2)
	end
	if score_timer > 1 then
		score_timer = 0
		if data.lap_index_1 > data.lap_index_2 or index_1 > index_2 and data.lap_index_1 > data.lap_index_2
		or index_1 > index_2  and data.lap_index_1 == data.lap_index_2 then
			data.score_1 = data.score_1 + 1
			msg.post("/ui#ui", "update_score")
		elseif data.lap_index_1 < data.lap_index_2 or index_2 > index_1 and data.lap_index_2 > data.lap_index_1
		or index_2 > index_1 and data.lap_index_1 == data.lap_index_2 then
			data.score_2 = data.score_2 + 1
			msg.post("/ui#ui", "update_score")
		end
	end
end


local function enable_speed_boost_1() boost_1 = false  end
local function enable_speed_boost_2() boost_2 = false  end
local function end_speed_boost_1() car_1_speed = car_1_speed / boost_speed end
local function end_speed_boost_2() car_2_speed = car_2_speed / boost_speed end


local function boost(speed, boost_status, boost_callback, enable_boost_callback)
	sound.play("/sound#speed_boost")
	speed = speed * boost_speed
	boost_status = true
	timer.delay(boost_duration, false, boost_callback)
	timer.delay(boost_delay, false, enable_boost_callback)
	return speed, boost_status
end

function on_message(self, message_id, message, sender)
	if message_id == hash("hit") then
		sound.play("/sound#get_stuck")
		if message.target == 1 then
			disable_car_1()
		else
			disable_car_2()
		end
	end
	if message_id == hash("boost_car_1") and boost_1 == false then
		car_1_speed, boost_1 = boost(car_1_speed, boost_1, end_speed_boost_1, enable_speed_boost_1)
	end
	if message_id == hash("boost_car_2") and boost_2 == false then
		car_2_speed, boost_2 = boost(car_2_speed, boost_2, end_speed_boost_2, enable_speed_boost_2)
	end
	if message_id == hash("switch_track_1") then
		current_track_car_1, index_1, current_track_index_1 = switch_track(current_track_car_1, index_1, current_track_index_1)
	end
	if message_id == hash("switch_track_2") then
		current_track_car_2, index_2, current_track_index_2 = switch_track(current_track_car_2, index_2, current_track_index_2)
	end
end


function on_input(self, action_id, action)
	if action_id == hash("boost_car_1") and action.released and boost_1 == false then
		car_1_speed, boost_1 = boost(car_1_speed, boost_1, end_speed_boost_1, enable_speed_boost_1)
	end
	if action_id == hash("boost_car_2") and action.released and boost_2 == false then
		car_2_speed, boost_2 = boost(car_2_speed, boost_2, end_speed_boost_2, enable_speed_boost_2)
	end
	if action_id == hash("switch_track_1") and action.pressed then
		current_track_car_1, index_1, current_track_index_1 = switch_track(current_track_car_1, index_1, current_track_index_1)
	end
	if action_id == hash("switch_track_2") and action.pressed then
		current_track_car_2, index_2, current_track_index_2 = switch_track(current_track_car_2, index_2, current_track_index_2)
	end
end
